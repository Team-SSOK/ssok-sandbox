plugins {
	alias(libs.plugins.springBoot)
	alias(libs.plugins.dependencyManagement)
	// gRPC 코드 생성을 위한 protobuf 플러그인 추가
	alias(libs.plugins.protobufPlugin)
}

configurations {
	compileOnly {
		extendsFrom(annotationProcessor)
	}
}

dependencies {
	// Common 모듈 의존성
	implementation project(':ssok-common')

	// Spring boot
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// swagger
	implementation libs.swagger

	// Spring Cloud Dependencies
	implementation libs.springCloud

	// mariadb
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

	// JWT
	implementation libs.jwtApi
	runtimeOnly libs.jwtImpl
	runtimeOnly libs.jwtJackson

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
//	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// config-service
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	implementation "org.springframework.cloud:spring-cloud-starter-bootstrap"
	implementation "org.springframework.boot:spring-boot-starter-actuator"


	// 아래는 gRPC를 위한 gradle
	// gRPC 관련 라이브러리
	implementation(libs.grpcStub)
	implementation(libs.grpcProtobuf)
	runtimeOnly(libs.grpcNetty)

	// protobuf 유틸(protobuf -> Json 변환 등)이 필요할 경우 (디버깅 용도)
	// implementation(libs.protobufJavaUtil)

	// Java 9 이상일 때, 컴파일 에러 방지용 어노테이션 API
	compileOnly(libs.jakartaAnnotation)

}

dependencyManagement {
	imports {
		mavenBom("org.springframework.cloud:spring-cloud-dependencies:${libs.versions.springCloud.get()}")
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.register("prepareKotlinBuildScriptModel"){}

// protobuf 설정
protobuf {
	protoc {
		// Protocol Buffers 컴파일러
		artifact = libs.protobufCompiler.get().toString()
	}
	plugins {
		grpc {
			// gRPC Java 코드 생성용 플러그인 (Stub, Service 등)
			artifact = libs.grpcCodegen.get().toString()
		}
	}
	generateProtoTasks {
		all().configureEach {
			plugins {
				grpc {}
			}
		}
	}
}
